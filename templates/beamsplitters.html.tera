{% extends "base" %}
{% import "macros-filters" as filters %}
{% block title %}Beamsplitters{% endblock title %}
{% block filters %}
{{ filters::input(label="Wavelength range",params=`data-postfix=" nm" data-min="200" data-max="2500"`) }}
{{ filters::input(label="Antireflection range",params=`data-postfix=" nm" data-min="200" data-max="2500"`) }}
{{ filters::input(label="Reflectance",params=`data-postfix=" %"`) }}
{{ filters::input(label="Transmittance",params=`data-postfix=" %"`) }}
{% endblock filters %}
{% block tablehead %}
<th>Manufacturer</th>
<th>Model</th>
<th>Diameter</th>
<th>Quantity</th>
<th>Shape</th>
<th>Mounted</th>
<th>Localisation</th>
<th>Wavelength range</th>
<th>Antireflection range</th>
<th>Type</th>
<th>Reflectance</th>
<th>Transmittance</th>
<th>Thickness</th>
{% endblock tablehead %}
{% block tabledata %}
{% for beamsplitter in rows -%}
<tr>
<td>{{beamsplitter.equipment.manufacturer}}</td>
<td>{{beamsplitter.equipment.model}}</td>
<td>{{beamsplitter.equipment.diameter}}</td>
<td>{{beamsplitter.equipment.quantity}}</td>
<td>{{beamsplitter.equipment.shape}}</td>
<td>{{beamsplitter.equipment.mounted}}</td>
<td>{{beamsplitter.location.localisation}} - {{beamsplitter.location.experimenter}}</td>
<td>{{beamsplitter.equipment.lower_operatingwavelengthrange_bound}} - {{beamsplitter.equipment.upper_operatingwavelengthrange_bound}}</td>
<td>{{beamsplitter.equipment.lower_arrange_bound}} - {{beamsplitter.equipment.upper_arrange_bound}}</td>
<td>{{beamsplitter.equipment.model_type}}</td>
<td>{{beamsplitter.equipment.reflectance}}</td>
<td>{{beamsplitter.equipment.transmittance}}</td>
<td>{{beamsplitter.equipment.thickness}}</td>
</tr>
{%- endfor %}
{% endblock tabledata %}
{% block script %}
filters = [
    { column_number: 7, slider : $("input[name*='wavelength']") },
    { column_number: 8, slider : $("input[name*='antireflection']") },
    { column_number: 10, slider : $("input[name*='reflectance']") },
    { column_number: 11, slider : $("input[name*='transmittance']") }
];
        filters.map(currentValue => {
$.fn.dataTable.ext.search.push(
    filter(currentValue)
);
})
$(".sampleSlider").on("change", () => {$("#stock").DataTable().draw()})
{% endblock script %}
